name: Test and Deploy

on:
  push:
    branches:
      - main
      - gh-actions*
  release:
    types:
      - published

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11' ]
#        python-version: [ '3.7', '3.8', '3.9' ]
    steps:
      - uses: actions/checkout@v3
      - name: Test against Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions coveralls
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
      - name: Test with tox
        run: tox
        env:
          GIST_TESTING_USER: ${{ secrets.GIST_TESTING_USER }}
          GIST_TESTING_KEY: ${{ secrets.GIST_TESTING_KEY }}
      - name: Upload coverage
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: "py${{ matrix.python-version }}"
          COVERALLS_PARALLEL: true

  coveralls:
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finish Coveralls
        run: |
          pip3 install --upgrade coveralls
          coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: test
    if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - dockerfile-extension: ""
            dockerimage-suffix: ""
          - dockerfile-extension: ".gcc"
            dockerimage-suffix: "-gcc"
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx${{ matrix.dockerimage-suffix }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx${{ matrix.dockerimage-suffix }}-
      - name: Login to GH registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine tags
        id: docker_tags
        run: script/docker-tags.bash "${{ matrix.dockerimage-suffix }}"
        env:
          DOCKER_IMAGE: ghcr.io/stograde/stograde
          GITHUB_REF: $GITHUB_REF
          GITHUB_SHA: $GITHUB_SHA
          TRIGGER: ${{ github.event_name }}
      - name: Build and push with tags ${{ steps.docker_tags.outputs.tags }}
        uses: docker/build-push-action@v3
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          file: Dockerfile${{ matrix.dockerfile-extension }}
          platforms: linux/arm/v7,linux/amd64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
      - name: Overwrite old cache with new cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  pypi:
    needs: test
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
          architecture: x64
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build --user
      - name: Build package
        run:
          python -m build --sdist --wheel --outdir dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
